;hex calculator for the command line
%include	'./mystdasmlib/genreg.ah'
%include	'./mystdasmlib/hex.ah'
%include	'./mystdasmlib/syscall.ah'
%include	'./mystdasmlib/cstring.ah'
%include	'./mystdasmlib/size.ah'
%include	'./mystdasmlib/util.ah'

global	main
section	.bss
	argv:	resq	1
	buff:	resb	9
	oper:	resb	1
section	.data
	arg1:	dq	0
	arg2:	dq	0
	newstrla	help,	'Put your expression into the arguments, each symbol and number separated by spaces.'
	newstrla	max,	'Program is limited to 8 bytes (16 hex chars) in each number and only one operation.'
	newstrla	badop,	'Must use + or - between hex numbers.'
section	.code

%macro	handlenoargs	0
	mov	rax,	sys_write
	mov	rdi,	stdout
	mov	rsi,	shelp
	mov	rdx,	[lhelp]
	syscall
	mov	rax,	sys_write
	mov	rdi,	stdout
	mov	rsi,	smax
	mov	rdx,	[lmax]
	syscall
	mov	rax,	sys_ret
	mov	rdi,	0
	syscall
%endmacro

handlebadop:
	mov	rax,	sys_write
	mov	rdx,	stdout
	mov	rsi,	sbadop
	mov	rdi,	[lbadop]
	syscall
	mov	rax,	sys_ret
	mov	rdx,	1
	syscall

main:
	mov	rax,	1
	cmp	rax,	rdi
	jne	prsargs
	handlenoargs
prsargs:;parse args
	mov	[argv],	rsi
	add	rsi,	qsize(1);select argv[1]
	mov	rsi,	[rsi]
	xor	rdi,	rdi
	xor	rdx,	rdx
	rdztstr	rdx,	rax,	rdi,	rsi
	frhexdu	r9,	rsi,	rdx
	mov	rsi,	[argv]
	add	rsi,	qsize(3);select argv[3]
	mov	rsi,	[rsi]
	xor	rdx,	rdx
	rdztstr	rdx,	rax,	rdi,	rsi
	frhexdu r10,	rsi,	rdx
	mov	rsi,	[argv]
	add	rsi,	qsize(2);select argv[2]
	mov	rsi,	[rsi]
	mov	dl,	[rsi]
	mov	al,	'+'
	cmp	al,	dl
	je	add
	mov	al,	'-'
	cmp	al,	dl
	je	sub
	jmp	handlebadop
add:	add	r9,	r10
	jmp	end
sub:	sub	r9,	r10
	jmp	end
end:	tohexdu	rdx,	rsi,	r9
	mov	[buff],	rdx
	mov	[buff+8],	byte	0x0A
	mov	rax,	sys_write
	mov	rdi,	stdout
	mov	rsi,	buff
	mov	rdx,	9
	syscall
	mov	rax,	sys_ret
	mov	rdi,	0
	syscall
